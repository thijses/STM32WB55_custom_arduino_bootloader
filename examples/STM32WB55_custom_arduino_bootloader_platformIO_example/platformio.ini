; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter, extra scripting
;   Upload options: custom port, speed and extra flags
;   Library options: dependencies, extra library storages
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; [platformio]
; default_envs = 

[TOTALB] ; Thijs OTA Loader-of-Boots (TOTALB) common values
PROGRAM_START = 0x7000 ; this is where the post-bootloader application will start (Note: offset value must be a multiple of 0x200)
BOOTLOADER_COMM_SIZE = 0x1000 ; how much flash space to reserve (just before PROGRAM_START) for bootloader-application communication
; ST's OTA documentation strongly suggests using 0x7000: https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjw-v35h_T9AhVxh_0HHVR-CW0QFnoECAkQAQ&url=https%3A%2F%2Fwww.st.com%2Fresource%2Fen%2Fapplication_note%2Fan5247-overtheair-application-and-wireless-firmware-update-for-stm32wb-series-microcontrollers-stmicroelectronics.pdf&usg=AOvVaw0lwigVjZK0FRVuaxuYxH1A
; 6 chunks/blocks/sectors (6*4096 bytes) of OTA bootloader code, leaving 4096 bytes of 'user memory'
; Furthermore, all ST's software (STM32CubeMonitor-RF, their android apps, etc.) use/default-to 0x7000 for their bootloader offsets.
; HOWEVER, this code will not be compatible with ST's OTA examples though (as they use a different BLE stack)
; and, more importantly, I can't fit my (inefficient) code in just 28kB... 
; (note: STM's official(?) HID bootloaders use the backup-domain (instead of the 7th chunk) to store magic bytes (app <-> bootloader communication))


[env]
; framework = arduino
monitor_speed = 115200

[env:OTA_z_STM32WB55] ; select this one when updating the regular application (post-bootloader)
platform = ststm32
platform_packages = framework-arduinoststm32 @ https://github.com/stm32duino/Arduino_Core_STM32.git ; pio package is out of date. This one includes required build script
board = nucleo_wb55rg_p
framework = arduino
debug_tool = stlink
upload_protocol = stlink
;; bootloader-related stuff:
extra_scripts = pre:application_offsets.py ; this script just does the lines below. NOTE: also requires stm32duino core >=v2.7.0-dev
;; doing it without the extra script:
;board_upload.offset_address = 0x0800F000
;board_build.flash_offset = ${TOTALB.PROGRAM_START} ; available since stm32duino core v2.7.0-dev
;; or you can set compiler/linker flash offset manually: (or if you have stm32duino core <v2.7.0-dev)
;build_unflags = -Wl,--defsym=LD_FLASH_OFFSET=0x0 ; an offset of 0 is hardcoded in the builder (unless USB HID/DFU bootloaders are used)
;build_flags = -Wl,--defsym=LD_FLASH_OFFSET=${TOTALB.PROGRAM_START} ; instruct the linker-script to use the offset
;              -D VECT_TAB_OFFSET=${TOTALB.PROGRAM_START} ; instruct the compiler to use the offset

[env:BOOTL_STM32WB55] ; select this one when updating the bootloader
platform = ststm32
platform_packages = framework-arduinoststm32 @ https://github.com/stm32duino/Arduino_Core_STM32.git ; pio package is out of date. This one includes better build script
board = nucleo_wb55rg_p
framework = arduino
debug_tool = stlink
upload_protocol = stlink
;; bootloader-related stuff:
build_flags = -D TOTALB_PROGRAM_START=${TOTALB.PROGRAM_START} ; let the code know where the application starts
extra_scripts = post:bootloader_size_check.py ; sets 'upload.maximum_size' (Note: pre/post shouldn't matter on this particular script in its current state)
;board_upload.maximum_size = 28672 ; this is automatically set by bootloader_size_check.py to match PROGRAM_START (but in decimal instead of hex)

